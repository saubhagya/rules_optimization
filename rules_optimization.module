<?php
// $Id$

/**
 * @file
 * Rules Optimization class and class for decision tree node.
 */

/**
 * A decision tree node.
 */
class RulesOptimizationTreeNode extends RulesPlugin implements RulesActionInterface {

  // Internal nodes contain conditions in $conditionData and for leaves NULL.
  public $conditionData;
  // Leaf nodes contain actions in $leafActions array elsewhere empty array.
  public $leafActions;
  // If condition is evaluated to be TRUE then $trueTree subtree is followed
  // otherwise $falseTree.
  public $trueTree;
  public $falseTree;

  function __construct() {
    // NULL and empty initialization.
    $this->conditionData = NULL;
    $this->leafActions = array();
    $this->trueTree = NULL;
    $this->falseTree = NULL;
  }

  /**
   * Overrides default evaluate method.
   */
  public function evaluate(RulesState $state) {
    if ($this->isLeaf()) {
      // It is a leaf evaluate all actions of leafActions array.
      foreach ($this->leafActions as $action) {
        $action->evaluate($state);
      }
    }
    elseif (isset($this->conditionData)) {
      if ($this->conditionData->evaluate($state)) {
        // Condition is evaluated TRUE, go to trueTree.
        $this->trueTree->evaluate($state);
      }
      else {
        // Condition is evaluated FALSE, go to flaseTree.
        $this->falseTree->evaluate($state);
      }
    }
  }

  /**
   * Checks integrity of the tree recursively.
   */
  public function integrityCheck() {
    if (isset($this->conditionData)) {
      $this->conditionData->integrityCheck();
      if (isset($this->trueTree)) {
        $this->trueTree->integrityCheck();
      }
      if (isset($this->falseTree)) {
        $this->falseTree->integrityCheck();
      }
    }
    else {
      foreach ($this->leafActions as $action) {
        $action->integrityCheck();
      }
    }
    return $this;
  }

  /**
   * Checks the node type.
   *
   * @return
   *   TRUE if node is leaf node otherwise FALSE.
   */
  public function isLeaf() {
    return isset($this->trueTree) || isset($this->falseTree) ? FALSE : TRUE;
  }

  /**
   * Add the actions at the leaves accessible by the node.
   *
   * @param $rule
   *   The rule, whose actions are to be inserted.
   */
  public function addRule($rule) {
    if ($this->isLeaf()) {
      // It is a leaf node append all the actions in the leafActions.
      foreach ($rule->actions() as $action) {
        array_push($this->leafActions, $action);
      }
    }
    else {
      // Recursively add the actions in trueTree and falseTree of current node.
      $this->trueTree->addRule($rule);
      $this->falseTree->addRule($rule);
    }
  }

  /**
   * Recursively traces the whole tree and logs it.
   *
   * @param $level
   *   Level of the $root in tree.
   */
  public function logTree($level) {
    if ($this->isLeaf()) {
      foreach ($this->leafActions as $action) {
        rules_log("Action %name at level %level", array('%name' => $action, '%level' => $level));
      }
    }
    else {
      rules_log("Condition %name at level %level", array('%name' => $this->conditionData, '%level' => $level));
      $this->trueTree->logTree($level + 1);
      $this->falseTree->logTree($level + 1);
    }
  }

  /**
   * Recursively goes through the tree and copies all the properties.
   *
   * @return
   *   Copy of the $tree.
   */
  public function treeClone() {

    $root = new RulesOptimizationTreeNode;
    $root->conditionData = $this->conditionData;

    if ($this->isLeaf()) {
      // It is a leaf node, contains array of actions.
      $root->leafActions = arrayClone($this->leafActions);
    }
    else {
      // Recursively build the tree.
      if (isset($this->trueTree)) {
        $root->trueTree = $this->trueTree->treeClone();
      }
      if (isset($this->falseTree)) {
        $root->falseTree = $this->falseTree->treeClone();
      }
    }
    return $root;
  }

  public function __sleep() {
    return array('conditionData', 'trueTree', 'falseTree', 'leafActions');
  }
}

/**
 * Class implementing optimization method.
 */
class RulesOptimization extends FacesExtender implements RulesOptimizationInterface {

  /**
   * Overrides the default optimization method.
   */
  public function optimize() {

    $tree = NULL;
    $conditions = array();
    $maxConditionSet = array();
    $rules = $this->getExtendable();
    $processedRules = array();

    foreach ($rules as $rule) {
      if ($rule->integrityCheck() && $rule->conditions() != NULL) {
        // Preprocess the rule for insertion in tree.
        $data = $this->preProcessRule($rule);
        if (!empty($data['conditions'])) {
          array_push($processedRules, $data);
          // Find the maximum different conditions in all rules.
          $this->getMaxConditionSet(arrayClone(end($data['conditions'])), $maxConditionSet);
        }
      }
    }

    if (!empty($maxConditionSet)) {
      $tree = $this->insertRules($processedRules, $maxConditionSet);
      $tree->trueTree->integrityCheck();
    }
    // Make $tree as the only child of event.
    $this->makeOnlyChild($tree);
  }

  /**
   * Removes all children of event and adds the optimized tree as the only
   * child.
   *
   * @param $tree
   *   Tree which is to be the only child of event.
   */
  protected function makeOnlyChild($tree) {

    $event = $this->getExtendable();
    // Remove all children of $event.
    while (sizeof($event->getIterator())) {
      foreach ($event as $child) {
        $child->delete($child);
      }
    }
    // Make tree as the only child of $event.
    if (isset($tree)) {
      $event->rule($tree->trueTree);
    }
    else {
      $tree = new RulesOptimizationTreeNode;
      $event->rule($tree);
    }
    RulesLog::logger()->checkLog();
  }

  /**
   * Converts the input rule conditions to make them suitable for insertion in
   * decision tree.
   *
   * @param $condition
   *   Condition for preprocessing before insertion.
   *
   * @return
   *   Array of arrays where each deeper array contains conditions in AND form,
   *   if all conditions of any deeper array evaluated to TRUE then
   *   correspondingaction should be triggered.
   */
  protected function preProcessRule($rule) {

    $conditions = (array) $rule->conditions();
    // Remove all empty containers of deeper level.
    $this->removeEmptyContainers($conditions);
    // Remove empty containers at highest level.
    $data['conditions'] = array();
    foreach ($conditions as $condition) {
      if (!$this->isEmptyContainer($condition)) {
        array_push($data['conditions'], $condition);
      }
    }
    $data['conditions'] = array($data['conditions']);
    // While there is some change in conditions, repeat conversion again.
    while ($this->convert($data['conditions']))
      ;
    $this->removeFALSERules($data['conditions']);
    $data['rule'] = $rule;
    return $data;
  }

  /**
   * Converts all condition to the AND from and as soon as function changes any
   * container (AND or OR) it returns.
   *
   * @param $conditions
   *   Array of arrays where deeper arrays are conditions of a rule.
   *
   * @return
   *   TRUE if some conversion is done, otherwise FALSE.
   */
  protected function convert(&$conditions) {

    $auxConditions = $conditions;
    $conditionArrayCount = 0;

    foreach ($auxConditions as $conditionArrayKey => $conditionArray) {
      $conditionCount = 0;

      foreach ($conditionArray as $condition) {
        if ($condition instanceof RulesAND) {
          // Convert AND and place the returned array in place of AND.
          array_splice($conditions[$conditionArrayKey], $conditionCount, 1, $this->convertAND($condition));
          return TRUE;
        }
        elseif ($condition instanceof RulesOR) {
          $convertedORArrays = $this->convertOR($condition);
          // $convertedORArray is array of arrays, can't replace OR like AND.
          $convertedORConditions = array();
          // Put each array of $convertedORArray in place of OR.
          foreach ($convertedORArrays as $convertedArray) {
            $convertedConditions = $conditions[$conditionArrayKey];
            // Replace OR with array of converted conditions.
            array_splice($convertedConditions, $conditionCount, 1, $convertedArray);
            array_push($convertedORConditions, $convertedConditions);
          }
          array_splice($conditions, $conditionArrayCount, 1, $convertedORConditions);
          return TRUE;
        }
        $conditionCount++;
      }
      $conditionArrayCount++;
    }
    return FALSE;
  }

  /**
   * Converts RulesAND in the condition so that get the same logic in AND form.
   * This is the case when AND is negated.
   *
   * @param $condition
   *   This is an instance of RulesAND and children are related in AND form.
   *
   * @return
   *   Array containing conditions in AND form.
   *
   * @see RulesAND
   */
  protected function convertAND($condition) {

    if ($condition->isNegated()) {
      // AND is negated, convert it into OR and change sign of all children.
      $newCondition = rules_or();
      foreach ($condition as $child) {
        $child->isNegated() ? $child->negate(FALSE) : $child->negate(TRUE);
        $newCondition->condition($child);
      }
      return array($newCondition);
    }
    else {
      return $condition->getIterator();
    }
  }

  /**
   * Converts RulesOR in the condition so that get the same logic in AND form.
   *
   * @param $condition
   *   This is an instance of RulesOR and its children are related in OR form.
   *
   * @return
   *   Array of arrays containing conditions in AND form.
   *
   * @see RulesOR
   */
  protected function convertOR($condition) {

    if ($condition->isNegated()) {
      // OR is negated, convert it into AND and change sign of all children.
      $newCondition = rules_and();
      foreach ($condition as $child) {
        $child->isNegated() ? $child->negate(FALSE) : $child->negate(TRUE);
        $newCondition->condition($child);
      }
      // Return array of arrays to match the specification of function.
      return array(array($newCondition));
    }
    else {
      $newConditions = array();
      $array = array();
      $conditionCount = 0;

      foreach ($condition as $child) {
        $array[$conditionCount++] = $child;
      }
      // Get all the permutations except which have all negated conditions.
      $permutationCount = pow(2, $conditionCount) - 1;
      for ($permutationNumber = 0; $permutationNumber < $permutationCount; $permutationNumber++) {
        $newCondition = arrayClone($array);
        // Binary numbers would give all permutations.
        $binary = base_convert($permutationNumber, 10, 2);
        for ($bitNo = strlen($binary) - 1, $conditionNumber = $conditionCount - 1; $bitNo >= 0; $bitNo--, $conditionNumber--) {
          if ($binary[$bitNo]) {
            // Bit is set, change the sign of negation.
            $newCondition[$conditionNumber]->isNegated() ? $newCondition[$conditionNumber]->negate(FALSE) : $newCondition[$conditionNumber]->negate(TRUE);
          }
        }
        $newConditions[$permutationNumber] = $newCondition;
      }
      return $newConditions;
    }
  }

  /**
   * Removes the condition containers which are empty.
   *
   * @param $conditions
   *   Array of conditions.
   */
  protected function removeEmptyContainers(&$conditions) {
    foreach ($conditions as $condition) {
      if ($this->isEmptyContainer($condition)) {
        $condition->delete($condition);
      }
      elseif ($condition instanceof RulesOR || $condition instanceof RulesAND) {
        $this->removeEmptyContainers($condition);
      }
    }
  }

  /**
   * Invoked by removeEmptyContainers(). It searches recursively.
   *
   * @param $condition
   *   Possible condition container, which is to be checked for emptiness.
   *
   * @return
   *   TRUE if container is empty otherwise FALSE.
   */
  protected function isEmptyContainer($condition) {
    $return = TRUE;
    if ($condition instanceof RulesOR || $condition instanceof RulesAND) {
      foreach ($condition as $c) {
        $return &= $this->isEmptyContainer($c);
      }
      return $return;
    }
    else {
      return FALSE;
    }
  }

  /**
   * Removes the rules which would give FALSE output in every case.
   *
   * @param $convertedConditions
   *   Array of arrays where deeper arrays are conditions of a single rule
   *   in AND form.
   */
  protected function removeFALSERules(&$convertedConditions) {
    $auxConvertedConditions = array();
    foreach ($convertedConditions as $conditions) {
      array_push($auxConvertedConditions, arrayClone($conditions));
    }
    // Condition array count which is to be removed.
    $conditionNumber = 0;
    foreach ($auxConvertedConditions as $conditions) {
      $auxConditions = array();
      foreach ($conditions as $condition) {
        array_push($auxConditions, $condition);
      }
      $conditionCount = sizeof($auxConditions);
      for ($i = 0; $i < $conditionCount; $i++) {
        for ($j = $i + 1; $j < $conditionCount; $j++) {
          if ($this->isSameTypeNotEqual($auxConditions[$i], $auxConditions[$j])) {
            // If value part is different then this would result FALSE.
            array_splice($convertedConditions, $conditionNumber, 1);
            $conditionNumber--;
            break 2;
          }
        }
      }
      $conditionNumber++;
    }
  }

  /**
   * Inserts the converted conditions and corresponding rule in decision tree.
   *
   * @param $conditions
   *   An array containing last element as rule and remaining array is all the
   *   conditions of rule in AND form.
   * @param $maxConditionSet
   *   All different conditions in the rule set or event set.
   *
   * @return $root
   *   Root node of the decision tree.
   *
   * @see getMaxConditionSet()
   */
  protected function insertRules($processedRules, $maxConditionSet) {

    // Root of the decision tree, which would be empty and actual tree would be
    // trueTree of this node.
    $root = new RulesOptimizationTreeNode;
    // A dummy node which is the trueTree of root.
    $root->trueTree = new RulesOptimizationTreeNode;

    foreach ($processedRules as $data) {
      foreach ($data['conditions'] as $conditions) {
        // First arrange the $conditions for insertion in decision tree.
        $this->sortConditions($conditions, $maxConditionSet);
        // Insert the sorted $conditions in decision tree.
        $this->createTree($root, $conditions, $maxConditionSet, $data['rule']);
      }
    }
    $root->trueTree->logTree(0);
    return $root;
  }

  /**
   * Invoked by insertRules to insert individual rule conditions in
   * the decision tree.
   *
   * @param $root
   *   Root of the decision tree in which conditions would be inserted.
   * @param $conditions
   *   Array of conditions which are referenced by $maxConditionSets.
   * @param $maxConditionSet
   *   Array of all the different conditions in rule set or event set.
   * @param $rule
   *   Rule which would be fired if $conditions is evaluated to be TRUE.
   *
   * @see getMaxConditionSet()
   * @see sortConditions()
   */
  protected function createTree(&$root, $conditions, $maxConditionSet, $rule) {

    /**
     * An array of arrays. Deeper arrays contain two elements, first is the
     * direction and second is the last node in decision tree whose direction
     * side next node would be inserted.
     *
     * @see sortConditions()
     */
    $previousDirections = array(array('direction' => 'TRUE', 'node' => $root));

    foreach ($maxConditionSet as $conditionKey => $condition) {
      $direction = $conditions[$conditionKey];
      // This array would be created in this pass, which would be $previousDirections in
      // next pass.
      $nextPreviousDirections = array();

      foreach ($previousDirections as $previous) {
        // Node where $conditio is to be inserted.
        $node = $previous['direction'] == 'TRUE' ? $previous['node']->trueTree : $previous['node']->falseTree;

        // If node is a leaf or $condition and condition of $node doesn't
        // match then we need new node for condition to be inserted.
        if ($node->isLeaf() || $condition->getElementName() != $node->conditionData->getElementName() || $condition->settings != $node->conditionData->settings) {
          // If direction is BOTH that means it doesn't effect if this
          // condition is true or false. This makes the tree size smaller.
          if ($direction != 'BOTH' && $direction != 'EQUALTYPE') {
            $newNode = new RulesOptimizationTreeNode;
            $newNode->conditionData = $condition;
            $newNode->trueTree = $node;
            $newNode->falseTree = $node->treeClone();

            if ($previous['direction'] == 'TRUE') {
              $previous['node']->trueTree = $newNode;
            }
            else {
              $previous['node']->falseTree = $newNode;
            }
            // Append the newly created node and $direction in $nextPreviousDirections.
            array_push($nextPreviousDirections, array('direction' => $direction, 'node' => $newNode));
          }
          else {
            // Direction is BOTH, so the $prevDirection and $prevNode need to
            // be preserved.
            array_push($nextPreviousDirections, array('direction' => $previous['direction'], 'node' => $previous['node']));
          }
        }
        else {
          // It is a leaf node or $condition and condition of $node matched.
          // So tree can proceed from current node.
          if ($direction == 'BOTH') {
            // Next condition would be inserted in both trueTree and flaseTree
            // of the current node.
            array_push($nextPreviousDirections, array('direction' => 'TRUE', 'node' => $node), array('direction' => 'FALSE', 'node' => $node));
          }
          elseif ($direction == 'TRUE') {
            array_push($nextPreviousDirections, array('direction' => 'TRUE', 'node' => $node));
          }
          else {
            // It's EQUALTYPE or FALSE.
            array_push($nextPreviousDirections, array('direction' => 'FALSE', 'node' => $node));
          }
        }
      }
      // Copy $nextPreviousDirections to $previousDirections for next iteration.
      $previousDirections = array();
      foreach ($nextPreviousDirections as $nextDirection) {
        array_push($previousDirections, $nextDirection);
      }
    }
    foreach ($previousDirections as $previous) {
      // All conditions are added in decision tree, now add the actions to all
      // the leaves accessible by last condition node.
      $node = $previous['direction'] == 'TRUE' ? $previous['node']->trueTree : $previous['node']->falseTree;
      $node->addRule($rule);
    }
  }

  /**
   * Converts $maxConditionSet such that if any condition that is in $conditionArr
   * and not in $maxConditionSet it is appended to $maxConditionSet. All conditions
   * in $maxConditionSet need to be non negated.
   *
   * @param $conditions
   *   Array of conditions, which is to be checked for new possible conditions
   *   that are not in $maxConditionSet.
   * @param $maxConditionSet
   *   Array containing all the different conditions in decision tree
   *  (i.e. maximum set of conditions).
   */
  protected function getMaxConditionSet($conditions, &$maxConditionSet) {

    $conditionCount = sizeof($maxConditionSet);
    $nonNegatedConditions = array();

    // Converts all the conditions of $conditionArr to non negated
    // for comparision.
    foreach ($conditions as $condition) {
      array_push($nonNegatedConditions, $condition->isNegated() ? $condition->negate(FALSE) : $condition);
    }
    // An array of flags initialized all zeros. If there is a match flag
    // would be set.
    for ($conditionNumber = 0; $conditionNumber < $conditionCount; $conditionNumber++) {
      $matchedFlag[$conditionNumber] = FALSE;
    }
    foreach ($nonNegatedConditions as $condition) {
      for ($found = FALSE, $conditionNumber = 0; $conditionNumber < $conditionCount; $conditionNumber++) {
        // Compares conditions from $conditionArr and $maxConditionSet if flag
        // is zero.
        if (!$matchedFlag[$conditionNumber] && $maxConditionSet[$conditionNumber]->getElementName() == $condition->getElementName() && $maxConditionSet[$conditionNumber]->settings == $condition->settings) {
          $matchedFlag[$conditionNumber] = TRUE;
          $found = TRUE;
          break;
        }
      }
      if (!$found) {
        // No match found: append $condition to $maxConditionSet.
        array_push($maxConditionSet, $condition);
      }
    }
  }

  /**
   * Sorts the $conditionArr according the $maxConditionSet array. After sorting
   * $conditionArr would have same keys as that of $maxConditionSet array and
   * values would be the direction.
   *
   * @param $conditions
   *   Array of conditions which is to be sorted.
   * @param $maxConditionSet
   *   Array of all the different conditions in rule set or event set.
   *
   * @see getMaxConditionSet()
   */
  protected function sortConditions(&$conditions, $maxConditionSet) {

    // Array of flags initialized to all zeros. If conditions match
    // corresponding flag would be set.
    foreach ($maxConditionSet as $conditionKey => $setCondition) {
      $matchedFlag[$conditionKey] = FALSE;
    }
    foreach ($conditions as $condition) {
       foreach ($maxConditionSet as $conditionKey => $setCondition) {
        if (!$matchedFlag[$conditionKey] && $setCondition->getElementName() == $condition->getElementName() && $setCondition->settings == $condition->settings) {
          // Conditions matched and flag was zero. Set the flag.
          $matchedFlag[$conditionKey] = TRUE;
          // If condition is negated then false branch would be taken,
          // otherwise true.
          $auxConditions[$conditionKey] = $condition->isNegated() ? 'FALSE' : 'TRUE';
          // Search equal type of condition in upper levels of tree to put rest
          // of conditions in false tree of that.
          for ($auxConditionNumber = 0; $auxConditionNumber < $conditionKey; $auxConditionNumber++) {
            if (!$matchedFlag[$auxConditionNumber] && $this->isSameTypeNotEqual($condition, $maxConditionSet[$auxConditionNumber])) {
              $matchedFlag[$auxConditionNumber] = TRUE;
              $auxConditions[$auxConditionNumber] = 'EQUALTYPE';
            }
          }
          break;
        }
      }
    }
    // All conditions in $maxConditionSet that were not matched with any condition
    // in $conditionArr, set value BOTH.
    foreach ($maxConditionSet as $conditionKey => $setCondition) {
      if (!$matchedFlag[$conditionKey]) {
        $auxConditions[$conditionKey] = 'BOTH';
      }
    }
    $conditions = $auxConditions;
  }

  /**
   * Compares two unequal conditions to check if they are of same type or not.
   *
   * @param $conditionFirst
   *   First condition to be compared.
   * @param $conditionSecond
   *   Second condition to be compared.
   *
   * TODO: Check that this function work in every situation.
   */
  public function isSameTypeNotEqual($conditionFirst, $conditionSecond) {
    if ($conditionFirst->getElementName() == 'data_is' && $conditionSecond->getElementName() == 'data_is' && $conditionFirst->isNegated() == $conditionSecond->isNegated()) {
      $settingsFirst = $conditionFirst->settings;
      $settingsSecond = $conditionSecond->settings;
      if (isset($settingsFirst['op']) && isset($settingsSecond['op']) && $settingsFirst['op'] == '==' && $settingsSecond['op'] == '==' && $settingsFirst['data:select'] == $settingsSecond['data:select']) {
        if (isset($settingsFirst['value:select']) && isset($settingsSecond['value:select']) && $settingsFirst['value:select'] != $settingsSecond['value:select']) {
          return TRUE;
        }
      }
    }
    return FALSE;
  }
}

/**
 * Deep clone objects of the input array.
 *
 * @param $array
 *   Array to be copied.
 *
 * @return
 *   The deep copy of the $array.
 */
function arrayClone($array) {

  $return = array();
  $keys = array_keys($array);
  $values = array_values($array);

  for ($count = 0; $count < count($keys); $count++) {
    if (is_object($values[$count])) {
      $return[$keys[$count]] = clone $values[$count];
    }
    elseif (is_array($values[$count])) {
      $return[$keys[$count]] = arrayClone($values[$count]);
    }
    else {
      $return[$keys[$count]] = $values[$count];
    }
  }
  return $return;
}
