<?php
// $Id$

/**
 * @file
 * Rules Optimization tests.
 */

class RulesOptimizationTestCase extends DrupalWebTestCase {

  static function getInfo() {
    return array(
      'name' => 'Rules Optimization tests',
      'description' => 'Test using the rules API to create and evaluate rules optimization.',
      'group' => 'Rules',
    );
  }

  function setUp() {
    parent::setUp('rules', 'rules_test', 'entity_metadata', 'rules_optimization');
  }

  protected function createTestEventSet() {
    $rules = array();
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition('php_eval', array('code' => 'return TRUE;'))
         ->condition('php_eval', array('code' => 'return drupal_set_message("Hello World") || TRUE;'))
         ->condition('php_eval', array('code' => 'return FALSE;'));
    array_push($rules, $rule);
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition('php_eval', array('code' => 'return TRUE;'))
         ->condition(rules_condition('php_eval', array('code' => 'return drupal_set_message("Hello World") || TRUE;'))->negate())
         ->condition('php_eval', array('code' => 'return FALSE;'));
    array_push($rules, $rule);
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition('php_eval', array('code' => 'return TRUE;'))
         ->condition('php_eval', array('code' => 'return drupal_set_message("Hello World") || TRUE;'))
         ->condition('php_eval', array('code' => 'return TRUE;'));
    array_push($rules, $rule);
    return $rules;
  }

  function testUniqueConditionExecution() {
    $node = $this->drupalCreateNode(array('type' => 'page'));
    $rules = $this->createTestEventSet();
    foreach ($rules as $rule) {
      $rule->save();
    }
    // Force immediate cache clearing so we can test the rule *now*.
    rules_clear_cache(TRUE);
    $event = rules_get_cache('event_node_presave');

    // Trigger the rule by updating the node.
    $node->status = 0;
    node_save($node);

    $msg = drupal_get_messages();
    if (sizeof($msg['status']) == 1 && end($msg['status']) == 'Hello World') {
      $this->pass('Condition was triggered only once.');
    }
    else {
      $this->fail('Condition was triggered only once');
    }
  }

  protected function createTestRule() {
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition(rules_or()
           ->condition('data_is', array('data:select' => 'node:type', 'value' => 'page'))
           ->condition('data_is', array('data:select' => 'node:status', 'value' => true))
           ->condition('data_is', array('data:select' => 'node:sticky', 'value' => true))
         );
    $rule->action('php_eval', array('code' => 'drupal_set_message("Executed");'));
    return $rule;
  }

  function testORConversion() {
    $node = $this->drupalCreateNode(array('type' => 'page'));
    $rule = $this->createTestRule();
    $rule->save();

    rules_clear_cache(TRUE);
    $event = rules_get_cache('event_node_presave');

    $node->status = 0;
    $node->sticky = 0;
    node_save($node);
    $msg = drupal_get_messages();

    $this->assertEqual($msg['status'][0], 'Executed', 'Rule successfully triggered and executed with one condition TRUE');

    $node->status = 1;
    node_save($node);
    $msg = drupal_get_messages();

    $this->assertEqual($msg['status'][0], 'Executed', 'Rule successfully triggered and executed with two conditions TRUE');

    $node->sticky = 1;
    node_save($node);
    $msg = drupal_get_messages();

    $this->assertEqual($msg['status'][0], 'Executed', 'Rule successfully triggered and executed with all TRUE conditions');
  }

  protected function createTestSet() {
    $rules = array();
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition('rules_test_condition_true')
         ->condition('rules_test_condition_true')
         ->condition(rules_or()
           ->condition(rules_condition('rules_test_condition_true')->negate())
           ->condition('rules_test_condition_false')
           ->condition(rules_and()
             ->condition('rules_test_condition_false')
             ->condition('rules_test_condition_true')
           )
         );
    $rule->action('rules_test_action');
    array_push($rules, $rule);
    $rule = rules_reaction_rule();
    $rule->event('node_presave')
         ->condition('rules_test_condition_true')
         ->condition(rules_condition('rules_test_condition_true'))
         ->action('rules_test_action')
         ->action('php_eval', array('code' => 'drupal_set_message("Executed");'));
    array_push($rules, $rule);
    return $rules;
  }

  function testActionExecution() {
    $node = $this->drupalCreateNode(array('type' => 'page'));
    $rules = $this->createTestSet();
    foreach ($rules as $rule)
      $rule->save();

    rules_clear_cache(TRUE);
    $event = rules_get_cache('event_node_presave');

    $node->status = 0;
    $node->sticky = 0;
    node_save($node);
    RulesLog::logger()->checkLog();

    $msg = drupal_get_messages();
    $this->assertEqual($msg['status'][0], 'Executed', 'Action was triggered.');
  }
}

function rules_test_condition_true($settings, $state, $element) {
  if (!$element instanceof RulesCondition) {
    throw new Exception('Rules element has not been passed to condition.');
  }
  rules_log('condition true called');
  return TRUE;
}

function rules_test_condition_false() {
  rules_log('condition false called');
  return FALSE;
}

function rules_test_action() {
  rules_log('action called');
}
